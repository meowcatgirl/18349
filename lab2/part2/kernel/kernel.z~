/*
 * kernel.c: Kernel main (entry) function
 *
 * Author: Laura Bloch <lrbloch@andrew.cmu.edu>
 *         Wale Desalu <adesalu@andrew.cmu.edu>
 *	   Kylie Fisher <kafisher@andrew.cmu.edu>
 * Date:   10/23 21:13
 */

//Imported Libraries
#import <include/bits/errno.h>
#import <include/bits/fileno.h>
#import <include/bits/swi.h>

int main(int argc, char *argv[]) {
	/* Needs more code. */
	// go to 0x08 --location of LDR command ( vector table )
	unsigned long int *pointer;
	unsigned long int oldInstr;
	unsigned long int oldInstr2;
	unsigned long int newInstr;
	unsigned long int ubootSwiAddr;
	unsigned long int s_addr;
	pointer = 0x08;
	sp = 0xa2fffffc;
	oldInstr = *pointer;
	oldInstr2 = *(pointer+4);
	//verify that oldInstr & 0xfffff000 corresponds to ldr pc [pc, #imm12]
	if((oldInstr & 0xfe1ff000) != 0xe41ff000) {
		printf("Unrecognized instruction\n");
		return 0xbadc0de;
	}

	// use *pointer to get address of UBoot's SWI Handler	
	// get pos/neg offset by checking oldInstr & 0x00800000 
	if((oldInstr & 0x00800000) == 0x00800000) 
		ubootSwiAddr = (oldInstr & 0xfff) + 0x10
	else ubootSwiAddr = 0x10 - (oldInstr & 0xfff);
	s_addr = (unsigned) &S_Handler;//try to remove & if doesnt work
	//at ubootSwiAddr put in LDR pc, [pc, #-4]
	*(ubootSwiAddr) = e51ff004;
	//put in s_addr at the next addr
	*(ubootSwiAddr + 4) = s_addr;
	// push argc and argv onto the stack
	*(sp) = 0x0;
	for(int i = argc; i > 0; i--)
	{
		sp -= 4;
		*(sp + 4*i) = argv[i - 1];
	}
	sp -= 4;
	*(sp) = argc;
	// call assembly function
	_start(sp);

	// restore data at ubootSwiAddr + 4
	*(ubootSwiAddr) = oldInstr;
	*(ubootSwiAddr + 4) = oldInstr2;
	return -255;
}

void exit(int status){
  //Return to UBoot in the same state it was initially
  _end();
  printf("Exit\n");
  //return status;
}

ssize_t read(int fd, void* buf, size_t count){

  int SDRAM_start = 0xa0000000;
  int SDRAM_end = 0xa3ffffff;
  int SDRAM_size = SDRAM_end-SDRAM_start;

  //Case 1: If fd doesn't match stdin
  if(fd != STDIN_FILENO) return EBADF;

  //Case 2: mem range & size outside range of SDRAM
  bptr = *buf;
  char *buffer = (char*) buf;
  bend = bptr + count;
  if((count > SDRAM_size) || (SDRAM_start > bptr) || (bptr > SDRAM_end) ||  (SDRAM_start > bend) || (bend > SDRAM_end)){ 

     return EFAULT;
     }

  //Case 3: read into buffer                                              
  for(i = 0; i < count; i++){                                             
    newChar = getc();                                   
                                                                                
    //EOT character                                                 
    if(newChar == "C-d"){                                           
      return i;                                          
    }                                                               
                                                                                
    //Backspace or delete character                                 
    elseif((newChar == "\b") || (newChar == 127)){
	if(i > 0) {
	  puts("\b \b");
	  i -= 2;
	  buffer[i+1] = 0;
	}
	else {
	  i -= 1;
	}	                  
    }                                                               
                                                                                
    //Newline or Carriage return characters                         
    elseif((newChar == "\n") || (newChar =="\r")){                  
      buffer[i] = "\n";
      putc('\n');
      i++;
      return i;                                          
    }  

    //Regular characters                                            
    else{                                                           
      buffer[i] = newChar;
      putc(newChar);                                       
    }                                                               
  }                                                                       
  return i;
}

ssize_t write(int fd, const void* buf, size_t count){

  int SDRAM_start = 0xa0000000;
  int SDRAM_end = 0xa3fffff;
  int SDRAM_size = SDRAM_end-SDRAM_start;

  //Case 1: If doesnt match stdout
  if (fd != STDOUT_FILENO) return EBADF; //in errno.h = 9

  //Case 2: mem range & size outside range of SDRAM
  bptr = *buf;
  bend = bptr + count;
  if((count > SDRAM_size) || (SDRAM_start > bptr) || (bptr > SDRAM_end) || (SDRAM_start > bend) || (bend > SDRAM_end)){
     return EFAULT; //in errno.h = 14
     }
  //Case 3: write buffer to stdout                                        
  for (i = 0; i < count ; i++){                                           
    putc(buf(i));                                                   
  }                                       
                                                                                
  return count;                                                           
}                        
